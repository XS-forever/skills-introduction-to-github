import heapq

def dijkstra(graph, start):
    """
    Алгоритм Дейкстры для нахождения кратчайших путей от начальной вершины до всех остальных.
    
    :param graph: Словарь, где ключи — это вершины, значения — списки кортежей (соседняя_вершина, вес)
    :param start: Начальная вершина
    :return: Словарь с кратчайшими расстояниями от start до всех вершин
    """

    # Инициализация
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
    priority_queue = [(0, start)]  # (расстояние, вершина)
    visited = set()

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        if current_vertex in visited:
            continue

        visited.add(current_vertex)

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances


# Пример графа в виде списка смежности
graph_example = {
    'A': {'B': 5, 'C': 1},
    'B': {'A': 5, 'C': 2, 'D': 1},
    'C': {'A': 1, 'B': 2, 'D': 4, 'E': 8},
    'D': {'B': 1, 'C': 4, 'E': 3, 'F': 6},
    'E': {'C': 8, 'D': 3},
    'F': {'D': 6}
}

# Запуск алгоритма
start_vertex = 'A'
shortest_paths = dijkstra(graph_example, start_vertex)

# Вывод результата
print(f"Кратчайшие пути от вершины {start_vertex}:")
for vertex, distance in shortest_paths.items():
    print(f"До {vertex}: {distance}")